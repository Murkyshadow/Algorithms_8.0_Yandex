# 13:50 - 14:06
# с помощью бин поиска перебираем варианты сторон изначального квадрата
def bin_search(a,b,s):
    left, right = max([a,b]) + 1, 10**8       # сторона квадрата, 10**8 - на основе входных ограничений (хотя максимакльная сторона намного меньше)
    while left <= right:
        mid = (left + right) // 2   # текущая длина стороны квадрата
        new_s = (mid-a) * (mid-b)   # площадь полки на основе текущей длины стороны квадрата
        if new_s == s:
            return mid
        elif new_s > s:
            right = mid - 1
        elif new_s < s:
            left = mid + 1

    return -1

A,B,S = map(int, input().split())
print(int(bin_search(A,B,S)))

# Так же немного математики:
# мы можем сразу вычислить (mid-a) * (mid-b) = s
# те (L-a) * (L-b) = S  где L - длина квадрата
# для этого надо раскрыть скобки и решить квадратное уравнение:
# L**2 - aL - bL + ab = S
# L**2 - (a+b)*L + (ab-S) = 0
# D = b**2 - 4ac - формула
# L_12 = (-b +- D**(0.5))  / 2a

# Аналитическое решение:
a = 1
b = (-A-B)
c = (A*B-S)

D = b**2 - 4*a*c
l_1 = (-b + D**0.5)  / (2*a)
# l_2 = (-b - D**0.5) / (2*a)   # берем l_1 тк l_2 может быть отрицательным или меньше a или b

# Ответ:
# if l_1 == int(l_1):
#     print(int(l_1))
# else:
#     print(-1)
