# делим интервал на 2 события: начало и конец
# сортируем эти события (если в один момент интервал и заканчивается и начинается,
# то сначала обработаем концы, а потом начала), далее идем по этим событиям и
# для каждого dp[i] находим мак. вес, где i - номер события, рассчитываем dp[i] вот так:
# 1) встречаем начало интервала --> вес с предыдущего события
# не изменился  --> dp[i] = dp[i-1], но запонимаем индекс начала этого интервала (numInterval_to_indStart[num_interval] = i)
# 2) встречаем конец интервала --> вес мог поменяться, поэтому тут выбор между предыдущим весом, либо прибавить вес текущего интервала к весу, который был в начале этого интервала
# max(dp[i-1], dp[индекс начала интервала, который запомнили] + вес_текущего_интервала)
n = int(input())
if n == 0:
    print(0)
else:
    events = set()
    START, END = 1, 0
    for ind_ev in range(n):
        st_time, end_time, weight = map(float, input().split())
        events.add((st_time, START, ind_ev))   # начало интервала
        events.add((end_time, END, ind_ev, weight))  # конец интервала

    events = sorted(events)
    numInterval_to_indStart = {}
    dp = [0] * len(events)
    START_OR_END, NUM_INTERVAL, WEIGHT = 1, 2, 3
    for ind_ev, ev in enumerate(events):
        if ev[START_OR_END] == START: # начало
            numInterval_to_indStart[ev[NUM_INTERVAL]] = ind_ev
            dp[ind_ev] = dp[ind_ev - 1]
        else:   # конец
            indStart = numInterval_to_indStart[ev[NUM_INTERVAL]]
            dp[ind_ev] = max([dp[ind_ev - 1], dp[indStart] + ev[WEIGHT]])
    print(max(dp))


# 5
# 6.9 8.2 9.7
# 1.3 3.6 3.9
# 7.5 9.8 8.4
# 4.7 5.1 3.0
# 10.0 10.0 4.0
#
#
# 1
# 1.0 2.0 5.0
# 5
#
# 2
# 1.0 2.0 3.0
# 3.0 4.0 5.0
# 8.0
#
# 2
# 1.0 3.0 2.0
# 2.0 4.0 5.0
# 5.0
#
# 3
# 1.0 3.0 2.0
# 2.0 4.0 5.0
# 5.0 6.0 3.0
# 8.0
#
# 4
# 1.0 4.0 2.0
# 2.0 5.0 4.0
# 3.0 6.0 3.0
# 7.0 8.0 5.0
# 9.0
#
# 3
# 1.0 5.0 3.0
# 2.0 6.0 5.0
# 3.0 7.0 4.0
# 5.0
#
# 4
# 1.0 2.0 2.0
# 3.0 4.0 3.0
# 5.0 6.0 4.0
# 7.0 8.0 5.0
# 14.0
#
# 3
# 1.0 10.0 2.0
# 2.0 9.0 6.0
# 3.0 8.0 4.0
# 6.0
#
# 3
# 1.0 2.0 3.0
# 2.0 3.0 4.0
# 3.0 4.0 5.0
# 12.0
#
# 5
# 1.0 100.0 20.0
# 1.0 10.0 5.0
# 11.0 20.0 6.0
# 21.0 30.0 7.0
# 31.0 40.0 8.0
# 26.0
#
# 4
# 1.0 20.0 10.0
# 2.0 5.0 8.0
# 6.0 9.0 7.0
# 10.0 15.0 9.0
# 24.0
#
# 0
# 0
#
# 4
# 1.0 2.0001 3.0
# 2.0001 3.0001 4.0
# 3.0001 4.0001 5.0
# 4.0001 5.0001 6.0
# 18.0


