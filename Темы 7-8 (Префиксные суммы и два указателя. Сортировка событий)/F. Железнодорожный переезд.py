# Задача F про поезда-призраки, которые могут проходить сквозь друг друга ))
# Решается с помощью сортировки событий.
# У нас есть 3 типа событий:
# Для каждого поезда рассчитываем минимальное время (1) когда поезд въезжает на переезд и время, (2) когда поезд покидает переезд.
# (надо внимательно обработать случаи, когда поезд движется в противоположную сторону, случай, когда поезд
# изначально находится на переезде и когда поезд уже проехал переезд, а так же учитываем, что координаты могут быть отрицательными)
# 3) Время прибытия машины
# Все эти события сортируем, а если по времени они совпадают, то сортируем со следующим приоритетом:
# 1) поезд въезжает на переезд
# 2) поезд уезжает с переезда
# 3) машина приезжает к переезду
# Далее идем по этим событиям и заводим счетчик поездов в каждый момент времени (+1 если 1ое событи, -1 если 2ое событие)
# Если встречаем событие с машиной, то:
# - если в этот момент счетчик поездов рвен нулю, то машина сразу проезжает (записываем в ответ время события)
# - если счетчик не равен нулю, тогда машина "становится в очередь" - заводим массив для таких машин и ждем когда счетчик
# поездов будет равен нулю, тогда в этот момент все машины из очереди смогут проехать переезд,
# записываем в ответ для этих машин текущее время.


num_trains, num_cars, x = map(int, input().split())
trains = [list(map(int, input().split())) for _ in range(num_trains)]
times_car = list(map(int, input().split()))
TRAIN_IN, TRAIN_OUT, CAR = 1,2,3    # приоритеты для сортировки событий (в случае если время совпадет)
events = [[t, CAR, ind_car] for ind_car, t in enumerate(times_car)]

for end_train, beginning_train, speed_train in trains:
    speed_train = -speed_train if beginning_train < end_train else speed_train  # отрицательная скорость, если поезд движется в противоположную сторону
    time_start_crossing = (x - beginning_train) / speed_train # время, когда начало поезда пересечет перекресток
    time_end_crossing = (x - end_train) / speed_train         # время, когда конец поезда пересечет перекресток
    if time_end_crossing < 0:   # если время отрицательное --> поезд отдаляется от пересечения
        continue
    if time_start_crossing < 0: # изначально начало поезда уже пересекло пересечение
        time_start_train_to_crossing = 0
    events.append([time_start_crossing, TRAIN_IN])
    events.append([time_end_crossing, TRAIN_OUT])

events.sort()
count_train = 0     # текущее кол-во поездов
ans = [None] * num_cars
queue_cars = []  # очередь из ожидающих машин
for ev in events:
    time, type_event = ev[:2]
    count_train += (type_event == TRAIN_IN)   # поезд въехал на переезд
    count_train -= (type_event == TRAIN_OUT)  # поезд покинул переезд
    if type_event == CAR: # машина подъехала
        ind_car = ev[2]
        queue_cars.append(ind_car)
    while count_train == 0 and queue_cars:  # если все поезда проехали, то все машины в очереди то же могут проехать
        ans[queue_cars.pop()] = time
print(*ans, sep='\n')

